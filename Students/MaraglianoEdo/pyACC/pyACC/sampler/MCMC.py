import numpy as np
import scipy as sp

def metropolis_hastings(x_start, target, sigma, n_iterations):
    """
    Perform Metropolis-Hastings sampling to generate samples from a target distribution.

    Args:
        x_start (float): Starting value for the Markov chain.
        target (callable): user-defined pdf
        sigma (float): sigma of the gaussian used as proposal
        n_iterations (int): Number of iterations to run the Metropolis-Hastings algorithm.

    Returns:
        list: List of samples generated by the Metropolis-Hastings algorithm.
    """


    sample = []             # List to store the generated samples
    current_val = x_start   # Initialize the current value of the Markov chain

    # Run the Metropolis-Hastings algorithm for the specified number of iterations
    for i in range(1, n_iterations):
        prop_val = np.random.normal(loc=current_val, scale = sigma)  # Generate a proposal value from the proposal distribution

        # Compute the log of acceptance ratio, restricting the algorithm to symmetric proposal distributions
        acc_ratio = np.min([0, np.log(target(prop_val)) - np.log(target(current_val))])
        
        # Accept or reject the proposed value based on the log acceptance ratio
        if np.log(np.random.uniform()) <= acc_ratio:
            current_val = prop_val  # Accept the proposed value
        sample.append(current_val)  # Add the accepted value to the sample list
    
    return sample


def metropolis_hastings_multivariate(x_start, target, proposal_covariance, n_iterations):
    """
    Perform Metropolis-Hastings sampling to generate samples from a multivariate target distribution.

    Args:
        x_start (ndarray): Starting point for the Markov chain.
        target (callable): User-defined PDF.
        proposal_covariance (ndarray): Covariance matrix of the Gaussian used as the proposal distribution.
        n_iterations (int): Number of iterations to run the Metropolis-Hastings algorithm.

    Returns:
        ndarray: Array of samples generated by the Metropolis-Hastings algorithm.
    """
    
    # List to store the generated samples
    samples = [x_start]
    
    # Initialize the current value of the Markov chain
    current_val = x_start

    # Run the Metropolis-Hastings algorithm for the specified number of iterations
    for i in range(1, n_iterations):
        # Generate a proposal value from the multivariate Gaussian proposal distribution
        prop_val = np.random.multivariate_normal(mean=current_val, cov=proposal_covariance)
        
        # Compute the acceptance ratio
        acc_ratio = min(1, target(prop_val) / target(current_val))
        
        # Accept or reject the proposed value based on the acceptance ratio
        if np.random.uniform() < acc_ratio:
            current_val = prop_val  # Accept the proposed value
        
        samples.append(current_val)  # Add the accepted value to the sample list
        
    samples = np.array(samples)
    return np.array(samples)

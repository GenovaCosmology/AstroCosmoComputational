import numpy as np
import scipy as sp

def metropolis_hastings(x_start, target, proposal, n_iterations, log=False):
    """
    Perform Metropolis-Hastings sampling to generate samples from a target distribution.

    Args:
        x_start (float): Starting value for the Markov chain.
        target (scipy.stats frozen random var): Frozen object representing the target distribution.
            This should be a frozen object of a distribution from the scipy.stats module.
        proposal (scipy.stats frozen random var): Frozen object representing the proposal distribution.
            This should be a frozen object of a distribution from the scipy.stats module.
        n_iterations (int): Number of iterations to run the Metropolis-Hastings algorithm.

    Returns:
        list: List of samples generated by the Metropolis-Hastings algorithm.
    """


    sample = []             # List to store the generated samples
    current_val = x_start   # Initialize the current value of the Markov chain
    
    # Run the Metropolis-Hastings algorithm for the specified number of iterations
    for i in range(1, n_iterations):
        prop_val = proposal.rvs(current_val)  # Generate a proposal value from the proposal distribution

        # Compute the acceptance ratio, restricting the algorithm to symmetric proposal distributions
        acc_ratio = np.min([1, target.pdf(prop_val) / target(current_val)])
        
        # Accept or reject the proposed value based on the acceptance ratio
        if np.random.uniform() <= acc_ratio:
            current_val = prop_val  # Accept the proposed value
            sample.append(current_val)  # Add the accepted value to the sample list
    
    return sample
